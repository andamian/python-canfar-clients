#!python
"""Given an x509 cert determine if a user is a member of at least one
of a list of groups"""

from cadc.groups.client import GroupsClient
from cadc.common.parser import BaseParser
import sys
from cadc.groups.exceptions import GroupExistsException, UserNotFoundException
from cadc.groups.group import Group
from cadc.groups.identity import Identity
from cadc.groups.user import User


description = "Create a group"

if __name__ == '__main__':

    # Parse the command line
    parser = BaseParser(description=description)
    parser.add_argument('groupname', type=str, help="Group name to create.")
    parser.add_argument('--pi_username', type=str,
                        help="PI username to create.")

    args = parser.parse_args()
    groupname = args.groupname
    pi_username = args.pi_username
    certfile = args.certfile

    # os.environ['AC_WEBSERVICE_HOST'] = 'jburke.cadc.dao.nrc.ca'

    # Create a GMS client and check for membership
    try:
        c = GroupsClient(certfile)
        # get the gmsclient logger
        logger = c.get_logger(verbose=args.verbose, debug=args.debug,
                              quiet=args.quiet)

        group = Group(groupname, User(Identity(c.current_user_dn, 'X500')))
        if pi_username:
            current_user = User(Identity(pi_username, 'HTTP'))
            group.add_user_member(current_user)
            group.add_user_admin(current_user)
        c.create_group(group)
        sys.exit(0)
    except ValueError as ve:
        logger.error(ve.message)
    except UserNotFoundException:
        logger.error("Unable to PUT new group. User '{}' not found."
                     .format(c.get_current_user_dn()))
    except GroupExistsException:
        logger.info("Unable to PUT new group. Group '{}' already exists."
                    .format(groupname))

        # If a user was given for an existing group,
        # add user as an admin user
        if pi_username:
            group = c.get_group(groupname)
            current_user = User(Identity(pi_username, 'HTTP'))

            # The set of user_admins contains the distinguishedName of the
            # users.
            # The user is a uid and we can't map between the two. Add the user
            # to the set and the server will sort out that they are dups.
            group.user_admins.add(current_user)
            try:
                c.update_group(group)
            except UserNotFoundException:
                logger.error("Unable to update existing group. User admin '{}' not found."
                             .format(current_user.user_id))
        else:
            raise
